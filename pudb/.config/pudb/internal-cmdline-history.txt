readable_datasources
values
lllm_output
llm_output
output
self
query
self.dataframes
agent
dataframes
len(dataframes)
dataframes
text
tex
text
node
text
action_input
text
action_input
tokens
q
organisation
llm_output
self.catalog
result
action.log
llm_output
jwt_payload
websocket.session
websocket.cookies
jwt_payload
question
message
question.question_message_history
n
n.n
.n
test_destination_args
values
client
client.testing
client.sdafdsf
client.get_database()
client.get_database("testing")
user
user.fetch_all_links()
await user.fetch_all_links()
user
user.organisation
user.organisation.
user.organisation
payload
response.json()
organisation
organisation.country = "hello"
organisation.users = []
organisation.users = [user]
document
response
response.content
mrkl_output
observation
python_tool.run(mrkl_output.action_input)
python_tool("print(1)")
python_tool.run("1")
observation
mrkl_output.action
mrkl_output.action_input
python_tool(mrkl_output.action_input)
python_tool("dsfsdf")
mrkl_output.action_input
type(mrkl_output.action_input)
observation
last_output
observation
mrkl_output
observation
last_output
messages
code
code += "print(fibonacci(5)"
python_tool
python_tool(code)
code
observation
history
k
v
history
last_output
observation
result
repo_save_path
dax_df_to_process
test
text
query
mrkl_step
type(mrkl_step)
mrkl_step
type(mrkl_step)
mrkl_step
agent
mrkl_step
databases
source_tables
dbt_repo.profiles
dbt_repo.profiles_yml
dbt_repo.dbt_project_yml
dbt_project.id
dbt_project.id.hex
decoded_result
type(decoded_result)
json.loads(decoded_result)
task_id
mrkl_step.llm_output
run_config.master_agent_tools
kwargs
api_config
api_cofig
kwargs.update(api_cofig)
kwargs
result
llm_router.chat_completions_create.call_args_list
res
files
filtered_logs_df
selected_question_id
logs_df
get_filtered_df(selected_question_id, logs_df)
mrkl_step.thought
is_final_answer(last_step)
ask_user
type(ask_user)
request
repo_url
org_name
repo_name
repo_url
destination_path
repo_path
org_name
repo_
repo_name
self.repos_dir
settings.ROOT_DIR
settings.DBT_REPOS_DIR
dbt_repos_dir
values["ROOT_DIR"]
values["DBT_REPOS_DIR"]
dbt_repos_dir
values["DBT_REPOS_DIR"]
Path("dsfsdf")
tool_store.get(BoobyTrapTool.name)
self.catalog
self.catalog_path.exists()
dbt_repo
dbt_repo.path
dbt_repo.catalog
self.model_files
node_name
self.path
out
res
dbt_project.github_base_url
dbt_repo.project_summary
dbt_repo.catalog
dbt_repo.project_summary
dbt_repo.parse_manifest
dbt_repo.parse_manifest()
dbt_repo.project_summary
model
self.cred
self.creds
sumarry
directory
data
type(data)
len(data)
data[0]
data[2]
len(data)
data[0]
data[1]
split_docs[0]
model_node_name
model_node_name in self._catalog.nodes.keys()
catalog_node
compiled_code
full_node_name
self._catalog.nodes.keys()
full_node_name
full_node_name == 'model.dbt_philips.stg_banco_de_sangre'
full
full_node_name
table.metadata.name
conn.engine
conn.engine.table_names()
conn.get_dataframe("SELECT * FROM stg_banco_de_sangre", chunksize=10)
next(conn.get_dataframe("SELECT * FROM stg_banco_de_sangre", chunksize=10))
conn.engine.table_names()
conn.engine.url
conn.creds['password']
query = f"SELECT * from {table.metadata.name}"
next(conn.get_dataframe(query, chunksize=10)
next(conn.get_dataframe(query, chunksize=10))
query
self.profiles_yml
out
self.dbt_project_yml
self.sources_yml
dbt_model
args
observation
history
tool_store.tool_names
tool_store.get(ContextQuery.name)
history[-1]
history[-2]
node_names
parsed_data
match
res
assitant_response.content
msg_body
event_name
user
query_for_retriever
result
create_response
len(labels)
labels_dict
len(labels)
metadata_json
created_events
deleted_events
gen_quizz_events
created_events
deleted_events
created_events
msg_body
request
request.num_questions
message
documents
len(documents)
len(qas)
len(documents)
num_questions
extract_percentage
documents_ranked
len(documents_ranked)
top_k
len(retained_documents)
len(documents0
len(documents)
num_questions
topic
len(responses)
len(histories)
len(splits)
len(splits[0])
len(responses)
responses[0]
parser.parse(llm_output=responses[0])
len(question_answers)
request.embedding_params
i
pipeline.config["components"][i]
path
pipeline.config["components"][i]
model_name
pipeline.config["components"][i]["params"]["embedding_model"]
model_name 
pipeline.config["components"][i]["params"]["embedding_model"] = model_name
pipeline.config["components"][i]["params"]["embedding_model"] 
filters
file_indexing_config_json
indexing_config_valid
step.knowledgebase_id
knowledgebase_id
step.name
knowledgebase_id
step
knowledgebase_id
return_embeddings